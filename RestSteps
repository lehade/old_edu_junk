package org.rdlopes.demo.bdd.steps;

import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.rdlopes.demo.bdd.tooling.SpringGlue;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.springframework.http.*;
import org.springframework.boot.test.web.client.TestRestTemplate;


import static org.springframework.http.MediaType.valueOf;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

public class RestSteps extends SpringGlue {

    @Autowired
    protected MockMvc mvc;

    @Autowired
    private TestRestTemplate restTemplate;

    private ResultActions performedActions;

    @When("I send a message {string}")
    public void iSendAMessage(String message) throws Exception {
        performedActions = mvc.perform(get("/echo")
                                               .queryParam("message", message))
                              .andDo(print());
    }

    @When("I send a post message with body {} to url {}")
    public void iSendAPOSTRequestToWithBody(String requestBody, String url) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<String> entity = new HttpEntity<>(requestBody, headers);

        // Send request to external service and get response
        ResponseEntity<String> response = invokeRESTCall(url, HttpMethod.POST, entity);

        // Verify response
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }

    @Then("API replies {string}")
    public void apiReplies(String expectedReply) throws Exception {
        performedActions.andExpect(status().isOk())
                        .andExpect(content().contentType(valueOf("text/plain;charset=UTF-8")))
                        .andExpect(content().string(expectedReply));
    }

    public ResponseEntity<String> invokeRESTCall(String url, HttpMethod method, HttpEntity<?> requestEntity) {

        return getRestTemplate().exchange(url, method, requestEntity, String.class);
    }

    public TestRestTemplate getRestTemplate() {

        return restTemplate != null ? restTemplate : new TestRestTemplate();
    }
}
